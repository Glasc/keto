---
import type { GetStaticPaths } from "astro";
import { useSanityClient } from "astro-sanity";
import Layout from "../../layouts/Layout.astro";
import { toPlainTextAndSummarized, transformDate } from "../../utils";

export type Post = {
  _id: string;
  publishedAt: string;
  text: any;
  title: string;
  imageUrl: string;
};

interface Page<T = any> {
  /** result */
  data: T[];
  /** metadata */
  /** the count of the first item on the page, starting from 0 */
  start: number;
  /** the count of the last item on the page, starting from 0 */
  end: number;
  /** total number of results */
  total: number;
  /** the current page number, starting from 1 */
  currentPage: number;
  /** number of items per page (default: 25) */
  size: number;
  /** number of last page */
  lastPage: number;
  url: {
    /** url of the current page */
    current: string;
    /** url of the previous page (if there is one) */
    prev: string | undefined;
    /** url of the next page (if there is one) */
    next: string | undefined;
  };
}

export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  try {
    const query = `*[_type == "post"] {
      _id,
      publishedAt,
      text,
      title,
      "imageUrl":image.asset->url
      }`;
    const listOfPosts: Post[] = await useSanityClient().fetch(query);

    // sort the listOfPosts
    const sortedPosts = listOfPosts.sort(
      (a, b) => new Date(b.publishedAt).getTime() - new Date(a.publishedAt).getTime()
    );

    const listOfPostWithTransformedData = sortedPosts?.map((post: Post) => {
      return { ...post, publishedAt: transformDate(post.publishedAt) };
    });

    return paginate(listOfPostWithTransformedData, { pageSize: 10 });
  } catch (err) {
    console.log("Oops!");
    return [];
  }
};

const props = Astro.props;

const page: Page<Post> = props?.page || [];

---

<Layout title={`Blog - Página ${page.currentPage}`}>
    <main class="max-w-[60rem] mx-auto px-6 pt-6 pb-10 flex flex-col">
      <h1 class="font-bold text-4xl text-center text-neutral-content">Blog</h1>

      <section class="space-y-5 py-8 block mx-auto flex-1">
        {
          page.data?.map((post: Post) => {
            return (
              <a class="block hover:no-underline" href={`/blog/${post._id}`}>
                <article class="bg-base-100 hover:ring-secondary grid max-w-sm cursor-pointer grid-cols-1 items-start space-x-3 rounded-md shadow-sm ring-1 ring-slate-900/5 transition duration-300 ease-in-out hover:shadow-lg hover:ring-2 md:max-w-full md:grid-cols-[auto_1fr]">
                  <img
                    class="w-full md:max-w-[10rem] self-center rounded-md"
                    src={`${post?.imageUrl}?w=400&fm=webp`}
                    alt="Post image"
                  />
                  <section class="p-4">
                    <div class="flex items-center justify-between">
                      <h2 class="text-neutral-content/90 mt-2 mb-1 text-xl font-semibold">
                        {post.title}
                      </h2>
                      <p class="text-base-content ml-2">{post.publishedAt}</p>
                    </div>
                    <div class="mt-3 ">
                      {toPlainTextAndSummarized(post.text, 25)}
                    </div>
                  </section>
                </article>
              </a>
            );
          })
        }
      </section>

      <div class="flex justify-center">
        <div class="btn-group">
          <a href={page.url.prev}>
            <button class="btn text-primary-content text-xl bg-secondary"
              >«</button
            >
          </a>
          <button class="btn text-primary-content bg-secondary"
            >Página {page.currentPage}</button
          >
          <a href={page.url.next}>
            <button class="btn text-primary-content text-xl bg-secondary"
              >»</button
            >
          </a>
        </div>
      </div>
    </main>
</Layout>
